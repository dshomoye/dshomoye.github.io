{"componentChunkName":"component---src-templates-blog-post-js","path":"/here-be-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Damola's blog"}},"markdownRemark":{"id":"aa4efb7e-e489-5768-b41c-c494980f01ed","excerpt":"After a few years of writing JavaScript (JS), well, React, I’ve been slowly gravitating towards a “functional” approach to writing code. I say ”functional…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After a few years of writing JavaScript (JS), well, React, I’ve been slowly gravitating towards a “functional” approach to writing code. I say ”"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"functional"}]},{"type":"text","value":"” because JavaScript is "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" a functional language. It does not "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"enforce"}]},{"type":"text","value":" functional paradigms. These guarantees, I think is the real draw to writing in a functional language. If your code compiles, it’s not only syntactically correct - something you’d get from almost any compiled language, it’s also algebraically sound: the code won’t run into, "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" exceptions , or unhandled errors. Guaranteed! (terms and conditions apply)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I wanted to give a “definition” of functional programming but I couldn’t find an authoritative one. It appears, like many things, “it depends”. For the sake of this post, these what I think important are:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"no side effects/immutability: no “variables”, only new "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"values"}]},{"type":"text","value":". "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"first-class functions: pass functions as parameters and return values and functions. A lot more languages support this, in fact, all the languages I mainly write (Go, Python, Js) have first class functions."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"algebraic data types (and a strong type system): with "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"a lot"}]},{"type":"text","value":" of discipline, it’s possible to write javascript and satisfy the previous points. But, JavaScript is dynamically "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and"}]},{"type":"text","value":" loosely typed, “data types” isn’t even a thing. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Typescript "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"does"}]},{"type":"text","value":" support discriminated unions, but the compiler can not guarantee (ie force) total coverage of a union - also a broken type guard will bring it crumbling down. This is an important property of pattern matching in functional languages, it ensures every case is covered, otherwise the code is invalid. Rust has pattern matching, and I "},{"type":"element","tagName":"a","properties":{"href":"/trying-rust-lang"},"children":[{"type":"text","value":"it’s part of why I liked Rust"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"ts","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"// discriminated union in TypeScipt\ntype Value = \n  | Number\n  | String"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I’m no expert so I’ll add a "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Functional_programming#Strict_versus_non-strict_evaluation"},"children":[{"type":"text","value":"wiki link to functional programming."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"what-language-to-speak","style":"position:relative;"},"children":[{"type":"text","value":"What language to speak"},{"type":"element","tagName":"a","properties":{"href":"#what-language-to-speak","ariaLabel":"what language to speak permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I already know of some functional languages. I think "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Haskell"}]},{"type":"text","value":" is probably the “default” (or at least famous for being) functional language.\nUnfortunately, I have past, painful experience of attempting to learn Haskell. I wouldn’t risk restarting my functional journey with Haskell. There are many other options, "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Clojure"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"F#"}]},{"type":"text","value":" "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Erlang"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Elixir"}]},{"type":"text","value":"  etc. Elixir is particularly interesting - especially because of the Phoenix framework: which is the Ruby on Rails for Elixir. Elixir is based on the Erlang VM and so it’s really great at real-time applications. Discord, for example, "},{"type":"element","tagName":"a","properties":{"href":"https://elixir-lang.org/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord/"},"children":[{"type":"text","value":"runs a lot of Elixir"}]},{"type":"text","value":". Phoenix is impressive, but I didn’t want to learn Phoenix, I wanted to learn functional programming. I couldn’t think of a small real-time idea that I could do in a short time that would justify learning a new language "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"and"}]},{"type":"text","value":" framework. I know I can learn it, but lacking an exciting idea to work on, I also didn’t want to risk losing motivation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"elm","style":"position:relative;"},"children":[{"type":"text","value":"Elm"},{"type":"element","tagName":"a","properties":{"href":"#elm","ariaLabel":"elm permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Elm is unique for frontend. It does not “speak” JavaScript, at all. JavaScript is still the compilation target but the compiled output has guarantees that I don’t know any other JS compiler provides. This is possible because Elm does not allow calling JavaScript functions (no "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Foreign_function_interface"},"children":[{"type":"text","value":"FFI"}]},{"type":"text","value":").\nThat means all the guarantees I’d mentioned earlier are still here. I decided I would create a copy of “Guess my word”. A simple version where the computer picks a random word and the user has to keep guessing until they find the word. The “hints” is that every guess is placed on wether it’s alphabetically before or after the hidden word.\nFirst, I went into reading the documentation/guide "},{"type":"element","tagName":"a","properties":{"href":"https://guide.elm-lang.org"},"children":[{"type":"text","value":"https://guide.elm-lang.org"}]},{"type":"text","value":". This is really good documentation. If you want to learn Elm, that guide is the best reference. In fact, it should be all you need (to start). That being said, here are some key concepts in elm that stood out to me:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"declaring-variables","style":"position:relative;"},"children":[{"type":"text","value":"Declaring variables:"},{"type":"element","tagName":"a","properties":{"href":"#declaring-variables","ariaLabel":"declaring variables permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You don’t. Next! -> "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"functions","style":"position:relative;"},"children":[{"type":"text","value":"Functions:"},{"type":"element","tagName":"a","properties":{"href":"#functions","ariaLabel":"functions permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Well, this is really the entire language. There are named and anonymous functions:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"-- regular \"greet\" function\n-- there are no variables, but values, like the \"hello\" String below.\ngreet name = \"hello \" ++ name\n-- wrap an intermediate function call in parenthesis\n-- anonymous greet function - easily pass to higher order functions like map\nList.map (\\name -> \"hello \" ++ naame) [\"John\", \"James\"]\n-- map is curried here, say_hello runs greet over a string list of names\nsay_hellos names = \n  List.map greet names"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Calling a function is its name followed by all the arguments, separated with spaces, no parenthesis, no commas. It immediately becomes an obvious improvement once you’re many levels deep in a function composition. There are no intermediate variables, you pass the result from one function to another function to another function and keep composing all the way down (or up? 🤔)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"types","style":"position:relative;"},"children":[{"type":"text","value":"Types"},{"type":"element","tagName":"a","properties":{"href":"#types","ariaLabel":"types permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The type system is where, I think, function programming really shines and makes the, somewhat weird (but eventually intuitive) paradigm worthwhile.\nElm has the usual types you’d expect, "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String,"}]},{"type":"text","value":" "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Float"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Bool"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There’s type annotations for functions:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"-- the compiler would have inferred the annotation below but it's usually better to create an explicit contract/api.\nsay_hellos: List String -> List String \nsay_hellos names = \n  List.map greet names"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Records"}]},{"type":"text","value":"\nKind of like Shapes/JavaScript Objects:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"type alias User = { name : String, age : Int }"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"immutability","style":"position:relative;"},"children":[{"type":"text","value":"Immutability"},{"type":"element","tagName":"a","properties":{"href":"#immutability","ariaLabel":"immutability permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For a function that updates "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age"}]},{"type":"text","value":", always returns a new user record :"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"-- updating a record uses a pipe |. Like a javascript spread and update.\nsetAge user newAge = { user | age = newAge }"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Data Types"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"type NewUser = Full User | Partial String"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"pattern-matching","style":"position:relative;"},"children":[{"type":"text","value":"Pattern Matching"},{"type":"element","tagName":"a","properties":{"href":"#pattern-matching","ariaLabel":"pattern matching permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NewUser"}]},{"type":"text","value":" type above:\nIn JavaScript, you can, (and probably will) forget to check wether a value is a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"User"}]},{"type":"text","value":" or a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"String"}]},{"type":"text","value":". Try to use the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" , and then fun things happen.\nBut in Elm, with the declared type, you will "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"never"}]},{"type":"text","value":" run into this problem. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s what a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"greetUser"}]},{"type":"text","value":" function would look like:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"greetUser user = \n\tcase user of\n\t\tFull u ->\n\t\t\t-- here, u is guaranteed to be a User\n\t\t\tgreet u.name\n\t\tPartial name ->\n\t\t\t-- string\n\t\t\tgreet name"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is verbose, but having the compiler ensure it’s impossible to “unwrap” a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NewUser"}]},{"type":"text","value":" without pattern matching over it eliminates a whole bunch of errors that would occur in so many imperative languages. And there’s no escape hatch for this, or “tricking” the compiler (like you can in TypeScript etc)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{"id":"no-side-effects","style":"position:relative;"},"children":[{"type":"text","value":"No Side Effects"},{"type":"element","tagName":"a","properties":{"href":"#no-side-effects","ariaLabel":"no side effects permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The idea of not having side effects can sometimes be hard to understand. I definitely didn’t fully comprehend it until working with elm and using the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm/http"}]},{"type":"text","value":" package. Network requests are non-deterministic operations. You literally never know what could happen. This makes the concept hard to fit into a functional paradigm because you can’t just “pass” a network function call to another function. That network “call” may never return (not really, but still). Many languages use async calls, others wait and timeout etc. In elm, there’s commands. any function that has to interact with the “outside” is non-deterministic, must be a command. This makes sense with a network call. But, it’s also the case with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"random"}]},{"type":"text","value":". You need things like a seed (like the current time), a sort of side-effect. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another interesting fact about elm: "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"there’s no random access in lists"}]},{"type":"text","value":"! This almost broke my brain why I found out. You can’t do something like  "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"get [1,2,3,4,5] 1"}]},{"type":"text","value":" , to get "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" out of the list.\nelm’s lists are linked lists. There’s no method or concept of going to an arbitrary point in constant time. I ended up just installing a package that chooses a random item from a list. It’s still linear but at least I don’t have write all the code to handle that.\nTo think I would need to install a package just to choose an item from a list. Crazy."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://guide.elm-lang.org/architecture/"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The elm Architecture makes the following easier to follow"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"building---something","style":"position:relative;"},"children":[{"type":"text","value":"Building - something"},{"type":"element","tagName":"a","properties":{"href":"#building---something","ariaLabel":"building   something permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Armed with what I consider to be enough knowledge of "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":". I started on with the word guessing app I described.\nIt works like so:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Load the page, with no data"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"call an endpoint to fetch json data of all words (it’s a 3MB file so it makes more sense to lazy load)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"choose a random word from all the words"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"start the game, with an input field for the user to enter words"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"repeat: user enters word:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if word == random word, user wins"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if word is not valid (in all words) reject"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if word not already entered, store in entered"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"else reject word"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Elm uses a “component”-type way of building UI. In my case, I only used one "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" component.\nThe component requires a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Model"}]},{"type":"text","value":" type that represents all the stats that the component can be in."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s the model I created:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"type Model\n    = Loaded GameState\n    | Loading\n    | Error\n    | Won GameState\n\ntype alias GameState =\n    { words : List String\n    , enteredWords : List String\n    , magicWord : String\n    , guess : String\n    }"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Within an "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":" component: to trigger a state transition, a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Msg"}]},{"type":"text","value":" is sent, and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":" passes this "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"msg"}]},{"type":"text","value":" to the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"update"}]},{"type":"text","value":" function. This is like actions and a reducer."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"type Msg\n    = GotWords (Result Http.Error (List String))\n    | GotMagicWord ( Maybe String, List String )\n    | Guess String\n    | CheckGuess\n    | Reset"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The game starts in the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":" state, then an http "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cmd"}]},{"type":"text","value":" starts to get all words, it enters the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loading"}]},{"type":"text","value":" state, then it either enters the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":" state with a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GameState"}]},{"type":"text","value":" that has "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"words"}]},{"type":"text","value":"; if successful or "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" state if not.\nWhen entering the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":" state, the update function calls a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cmd"}]},{"type":"text","value":" that pulls a random word from all words - when the command returns, the game "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"stay"}]},{"type":"text","value":"s in the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":" state but a new  "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GameState"}]},{"type":"text","value":" is returned with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"magicWord"}]},{"type":"text","value":"\nThe "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":" state is where the game playing occurs. There’s no transition until the user wins (after "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CheckGuess"}]},{"type":"text","value":" "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Msg"}]},{"type":"text","value":" is handled) into the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Won"}]},{"type":"text","value":" state. A reset will return directly into "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Loaded"}]},{"type":"text","value":". "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"update"}]},{"type":"text","value":" function is fairly long since it handles all transitions, here’s a snippet of it:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n\t    case msg of\n        GotWords result ->\n            case result of\n                Ok words ->\n                    ( Loaded (GameState (List.map String.toLower words) [] \"\" \"\"), randomWord words )\n\n                Err _ ->\n                    ( defaultModel, Cmd.none )\n-- there are other matches on msg\n..."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Views"}]},{"type":"text","value":"\nThe one part of "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":" that is still growing on me is how to render views, "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":"’s version of "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"jsx"}]},{"type":"text","value":".\nOn the upside, it’s just  functions. On the downside, because of how much nesting happens in "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"html"}]},{"type":"text","value":". It looks…, well it looks like this:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"elm","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"view model = \n  app []\n    [ container []\n        [ div []\n            [ h2 [] [ text \"You Win!\" ]\n            , img [ src \"https://source.unsplash.com/random\", Html.Styled.Attributes.width 300, Html.Styled.Attributes.height 300 ] []\n            , div [] [ button [ onClick Reset ] [ text \"Restart\" ] ]\n            ]\n        ]\n    ]"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code above is one "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"case"}]},{"type":"text","value":"  (in "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Won"}]},{"type":"text","value":" state) from the view of the app, "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onClick"}]},{"type":"text","value":" handler on the button which expects "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Msg"}]},{"type":"text","value":" which then gets sent to "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"update"}]},{"type":"text","value":" …etc\nEvery html element is a function that takes two arguments: a list of its attributes (like "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src"}]},{"type":"text","value":" in image,  event handlers, etc; and a list of its children. "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So: "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<h1>Hello</h1>"}]},{"type":"text","value":" looks like: "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"h1 [] [text \"Hello\"]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" is a special function that sets the text of an element."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"result","style":"position:relative;"},"children":[{"type":"text","value":"Result"},{"type":"element","tagName":"a","properties":{"href":"#result","ariaLabel":"result permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s the "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/dshomoye/guesstheword"},"children":[{"type":"text","value":"repo"}]},{"type":"text","value":" of the entire “app”. Didn’t bother hosting it.\nBut it runs! pinky swear! (I use "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm reactor"}]},{"type":"text","value":" the entire time)\nThe best part of all this is that I spent maybe an hour actually writing the entire code.\nSure, its trivial, but its a new language etc. It’s super nice to write code, and once all the red squiggles are gone, it just runs! I wired the entire thing up (with http requests) without looking at the browser because all the “edge” cases were just glaring at me "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"in the code"}]},{"type":"text","value":".   Not even TypeScript will give you that."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"final-thoughts","style":"position:relative;"},"children":[{"type":"text","value":"Final Thoughts"},{"type":"element","tagName":"a","properties":{"href":"#final-thoughts","ariaLabel":"final thoughts permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Functional programming is sweet - or, I should say "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elm"}]},{"type":"text","value":" is sweet! tomayto, tomahto.\nBut more importantly, functional programming is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not that"}]},{"type":"text","value":" foreign . It just takes some time working with it. I intend to eventually find a good use case for "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" so I can really build some “grown up” projects in it -  because I am certain I am going to be super productive and satisfied working with it."}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"Here Be Functions","date":"April 30, 2021","description":"A foray into functional programming, well, into elm really.","gallerySources":null,"lastUpdated":"April 30, 2021","tags":["technology"]},"timeToRead":9}},"pageContext":{"slug":"/here-be-functions/","previous":{"parent":{"name":"index"},"fields":{"slug":"/scrobble-everything/"},"frontmatter":{"title":"Scrobble Everything."}},"next":null}},"staticQueryHashes":["139983731","63159454"]}