{"componentChunkName":"component---src-templates-blog-post-js","path":"/simple-mac-app/","result":{"data":{"site":{"siteMetadata":{"title":"Damola's blog"}},"markdownRemark":{"id":"bd69d265-09a9-5e2e-8e4d-8af5e237cad2","excerpt":"I was consolidating my notes (Bear) and journal (Day One) into Bear. Day One has an “On This Day” and a Calendar view for looking back while Bear doesn’t. I…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I was consolidating my notes ("},{"type":"element","tagName":"a","properties":{"href":"https://bear.app"},"children":[{"type":"text","value":"Bear"}]},{"type":"text","value":") and journal ("},{"type":"element","tagName":"a","properties":{"href":"https://dayoneapp.com"},"children":[{"type":"text","value":"Day One"}]},{"type":"text","value":") into Bear. Day One has an “On This Day” and a Calendar view for looking back while Bear doesn’t. I figured I could make a simple app that would:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Show Bear notes that were created on today’s date from previous years."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I wouldn’t need a custom tool but queries like "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x OR y OR z"}]},{"type":"text","value":" aren’t possible in Bear, yet. But I can make multiple queries and combine them ("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x + y + z"}]},{"type":"text","value":") outside Bear;  Bear provides a bunch of callbacks, including one for search. This is based on the inter-app communication protocol, "},{"type":"element","tagName":"a","properties":{"href":"http://x-callback-url.com"},"children":[{"type":"text","value":" "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x-callback-url"}]},{"type":"text","value":" "}]},{"type":"text","value":". I had the “API” I needed."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This turned out to be a very unpleasant endeavor of trying out libraries to build the app. I mostly brought the pain on myself, but I still wanted to write about it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Spoiler: I "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"didn’t"}]},{"type":"text","value":" end up with an app. As with many things, the simplest solution was the best one (the hardest part is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thinking of"}]},{"type":"text","value":" a simple solution). "},{"type":"element","tagName":"a","properties":{"href":"#keeping-it-simple"},"children":[{"type":"text","value":"I made a script"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-libraries","style":"position:relative;"},"children":[{"type":"text","value":"The libraries"},{"type":"element","tagName":"a","properties":{"href":"#the-libraries","ariaLabel":"the libraries permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"react-nodegui","style":"position:relative;"},"children":[{"type":"text","value":"react-nodegui"},{"type":"element","tagName":"a","properties":{"href":"#react-nodegui","ariaLabel":"react nodegui permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first thing I needed was a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"good"}]},{"type":"text","value":" library that will allow me to quickly build a GUI. Electron is off the list for myriad of reasons; especially how bloated it is. Other than building a native app (Swift) I didn’t know any other options off the top of my head. I searched and stumbled upon "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/nodegui/react-nodegui"},"children":[{"type":"text","value":"react/nodegui"}]},{"type":"text","value":". It looked like a good alternative to electron, it ("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nodegui"}]},{"type":"text","value":") renders with Qt5 and has css-like styling. I know React. “This will be quick”, I thought.\nAfter spending more time on it: I was disappointed to realize it’s not quite “ready”. Not like "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"v0.99.99"}]},{"type":"text","value":" “ready” but “not production level” ready wink, wink. No, it’s “couldn’t get it to work with a basic app” ready. My biggest issue was with the “scroll” container provided in the react library("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<ScrollArea />"}]},{"type":"text","value":")- it bugs out with changes in the size of its children (due to changes in state). I think with some sleuthing, I might have run into a trick to make it work. But, no time for that. This has to be simple. I moved on."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"swiftui","style":"position:relative;"},"children":[{"type":"text","value":"SwiftUI"},{"type":"element","tagName":"a","properties":{"href":"#swiftui","ariaLabel":"swiftui permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My disappointing experience with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"react/nodegui"}]},{"type":"text","value":"  made me decide to “build native”. If I’m going to ignore electron, I should go with the most optimal solution. I was new to Swift but picking up the language didn’t particularly worry me. What I dreaded was reading Apple’s documentation. Well, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"finding"}]},{"type":"text","value":" documentation. The closest I’ve gotten to the ecosystem is trying to write iOS shortcuts and realizing how frustrating finding docs can be. This would involve a lot of trial and error, which will ironically take longer than sticking with react; but native! It took me more than an hour to set up a project and write an app that renders the “note” UI I wanted."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once I “got” Swift UI though — it was a bliss. It was like writing React, or "},{"type":"element","tagName":"a","properties":{"href":"https://svelte.dev"},"children":[{"type":"text","value":"Svelte"}]},{"type":"text","value":" - declare views, map values in view to state/props and everything gets rendered. If you haven’t worked with a declarative UI library: I recommend it. It “just makes sense”.\nHere’s an example of a grid layout with children populated from an Array, and accompanying styles:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"swift","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"  LazyVGrid(\n      columns: columns,\n      alignment: .center,\n      spacing: 16\n  ) {\n      Section(header: Text(\"Look Back\").font(.title)) {\n          ForEach(notes, id: \\.self) { note in\n              VStack {\n                  Text(\"Note Title\")\n                      .font(.system(size: 20))\n                      .bold()\n                  Text(note)\n              }\n          }\n          .padding(20)\n          .background(Color.white)\n          .cornerRadius(10)\n          .shadow(radius: 2)\n      }.padding(25)\n  }"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice how properties are a "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".{style}()"}]},{"type":"text","value":" away…👌🏾."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The hard part of the work was getting bear notes in. In the  "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"react/nodegui"}]},{"type":"text","value":" app, I used an external app "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/martinfinke/xcall"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"xcall"}]}]},{"type":"text","value":" to make the x-callback calls (as a shell command) and parse the result in node. But since this is a native app, x-callbacks are native and I thought I shouldn’t have to do that. I found a library that makes set up easy "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/phimage/CallbackURLKit"},"children":[{"type":"text","value":"CallbackURLKit"}]},{"type":"text","value":". Adding a dependency is surprisingly easy in xCode (paste the link to the git repo and it handles everything). Unfortunately, "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"using"}]},{"type":"text","value":" callbacks is where I hit a brick wall and couldn’t get things working. As I understand it, x-callbacks are stateless, idempotent calls (in a way, they’re RESTFUL). What I needed was stateful. I couldn’t combine results from multiple calls because each time a new result is returned, the app receives it in a “clean state” - in fact it would spawn a new window for each returned callback result. I constrained the app to single-window but that didn’t solve it. I might be wrong on my theory of the cause of the problem but that’s as far as I got. I felt like I had spent too much time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"pysimplegui","style":"position:relative;"},"children":[{"type":"text","value":"pysimplegui"},{"type":"element","tagName":"a","properties":{"href":"#pysimplegui","ariaLabel":"pysimplegui permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Swift and node have failed me (well, arguably, I failed myself through my impatience, but … meh) - time for another language - Python. I might have googled “python easy UI library” for "},{"type":"element","tagName":"a","properties":{"href":"https://pysimplegui.readthedocs.io/en/latest/"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pySimpleGUI"}]}]},{"type":"text","value":" to come up. This library is fine. It’s definitely "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"simple"}]},{"type":"text","value":". But, I didn’t have to spend a long time with the docs and playing with the code to know it’s not going for a “clean” (modern?) look. A “pretty app” wasn’t what I setout to make, but seeing something that "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"didn’t"}]},{"type":"text","value":" look good certainly made me look elsewhere."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"wxpython","style":"position:relative;"},"children":[{"type":"text","value":"wxPython"},{"type":"element","tagName":"a","properties":{"href":"#wxpython","ariaLabel":"wxpython permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"wxPython also appeared a lot in results. I read through "},{"type":"element","tagName":"a","properties":{"href":"https://wxpython.org"},"children":[{"type":"text","value":"wxPython’s documentation"}]},{"type":"text","value":". I spent more time on this than I did with PySimpleGUI because the API is pretty extensive. I could "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"technically"}]},{"type":"text","value":" create the card views I was looking for. But, unfortunately, like Swift, I didn’t quickly find easy-to-understand, non-trivial code I could copy paste. To me, the wxPython docs were written for someone familiar with wxWidgets but wants Python. I might be wrong I wasn’t exactly in detective mode, figuring out the styling model was more difficult than I liked. SwiftUI was easier in this sense: what "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"feels"}]},{"type":"text","value":" like the right way to do something is usually the right way to do it. So I continued with my search."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"pywebview","style":"position:relative;"},"children":[{"type":"text","value":"pywebview"},{"type":"element","tagName":"a","properties":{"href":"#pywebview","ariaLabel":"pywebview permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I searched more and stumbled upon pywebview. I wish I had found this first.\nThis is a full-stack app with a python backend and a web front end, bundled up. Sounds familiar. But, this is different from all the javascript/Python libraries I (partially) tested. "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pywebview"}]},{"type":"text","value":" uses the system’s webview; theoretically yielding a much smaller bundle than an electron app with Chrome. What quickly stood out to me is how easy it is to send data back and forth from javascript <-> python unlike some other "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"webview"}]},{"type":"text","value":" libraries "},{"type":"element","tagName":"a","properties":{"href":"#misc"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example sending notes to the UI:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"python","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"class Api:\n    def fullscreen(self):\n        webview.windows[0].toggle_fullscreen()\n\n    def ls(self):\n        return os.listdir('.')\n    \n    def bear_notes_this_day(self):\n        notes = notes_from_this_day(10)\n        return notes\n\n...\n\nif __name__ == '__main__':\n    window = webview.create_window('pywebview-react boilerplate', entry, js_api=Api(),)"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And  receiving in javascript:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"javascript","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"      window.pywebview?.api?.bear_notes_this_day()\n        .then((result) => {\n          console.log('python result: ',result)\n          setNotes(result)\n          setLoading(false)\n        }).catch(() => {\n          setLoading(false)\n        })"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is admittedly more complicated than nodegui which is JavaScript all the way and needs no interop. But, it works! And the components worked. It "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"scrolls"}]},{"type":"text","value":". CSS is exactly as it should be. The renderer is not "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"trying"}]},{"type":"text","value":" to be html. It "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"is"}]},{"type":"text","value":" html. There is a "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/r0x0r/pywebview-react-boilerplate"},"children":[{"type":"text","value":"React starter"}]},{"type":"text","value":" that I built on top of. I got the app I wanted in no time. I even took time to style it a bit:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"media-box","properties":{"src":"media/simple-mac-app/pywebview.png","name":"Complete PyWebview App."},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This was the only app I bothered to generate a bundle for. It came out to 12MB - this is certainly better than Electron, a small win. Unfortunately, the built app wouldn’t open. I don’t know what I did wrong. But at this point I was pretty frustrated so I just set everything aside."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Later on, I got a notification on my phone from the Day One app reminding of my journal entries from this day -💡!."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"keeping-it-simple","style":"position:relative;"},"children":[{"type":"text","value":"Keeping it Simple"},{"type":"element","tagName":"a","properties":{"href":"#keeping-it-simple","ariaLabel":"keeping it simple permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That notification made me feel like (or better, realize) I had just wasted my time "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Law_of_triviality"},"children":[{"type":"text","value":"bike shedding"}]},{"type":"text","value":". Couldn’t I just write something that sends a notification of notes from this day to my mac everyday? That’s simpler than my initial idea. I did that. I wrote it in node because it was the one with the easiest, copy-paste ready, documented library "},{"type":"element","tagName":"a","properties":{"href":"https://www.npmjs.com/package/node-notifier"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node-notifier"}]}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code looks something like:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"deckgo-highlight-code","properties":{"language":"javascript","theme":"one-dark"},"children":[{"type":"text","value":"\n          "},{"type":"element","tagName":"code","properties":{"slot":"code"},"children":[{"type":"text","value":"  for (let year = currentYear - 10; year < currentYear; year++) {\n    const cmd = `xcall.app/Contents/MacOS/xcall -url \"bear://x-callback-url/search?term=@cdate(${month}-${day}-${year})&show_window=no\"`;\n    exec(cmd, (error, stdout, stderr) => {\n      if (error || stderr) {\n        console.error(error, stderr);\n        return;\n      }\n      const notes = JSON.parse(JSON.parse(stdout).notes).map((n) => ({\n        ...n,\n        tags: JSON.parse(n.tags),\n      }));\n      notes.map((n) => {\n        const truncTitle =\n          n.title.length < 20 ? n.title : `${n.title.slice(0, 20)}...`;\n        notifier.notify({\n          title: `(Bear) On this day (${day}-${month}) in ${year}`,\n          subtitle: `On ${n.creationDate}. Tags: ${n.tags.join(\", \")}`,\n          message: truncTitle,\n          open: `bear://x-callback-url/open-note?id=${n.identifier}`,\n          timeout: 24 * 60 * 60,\n        });\n      });\n    });\n  }"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I then set automator to run the script every day. And now I get this every day:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"media-box","properties":{"src":"media/simple-mac-app/notification.png","name":"Daily Notes in Notification Center."},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"in-the-end","style":"position:relative;"},"children":[{"type":"text","value":"In the End"},{"type":"element","tagName":"a","properties":{"href":"#in-the-end","ariaLabel":"in the end permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There might not be much to learn from my particular unpleasant experience. I was pretty impatient. So, if you’re impatient and searching, maybe this will save you some (more?) time:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you’re building an app for Mac OS, use Swift (Swift UI). It’s really not hard to learn and I think it will genuinely be a joy to use. Plus, your app will be small, performant, and have access to "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"all"}]},{"type":"text","value":" of the goodies of the ecosystem."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you don’t want to learn Swift, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"need"}]},{"type":"text","value":" cross-platform, don’t have the capacity/time to do native, then I think electron is the best bet - for now; unless you’re willing to start and then run into random issues that will make the journey very painful, very quickly."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"misc","style":"position:relative;"},"children":[{"type":"text","value":"Misc."},{"type":"element","tagName":"a","properties":{"href":"#misc","ariaLabel":"misc permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are a lot of libraries that are more minimal than electron including:\n- "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/webview/webview"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"webview/webview"}]}]},{"type":"text","value":" (really sparse on docs)\n-  Microsoft’s "},{"type":"element","tagName":"a","properties":{"href":"https://microsoft.github.io/react-native-windows/"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Native"}]}]},{"type":"text","value":" - also sparse on docs, especially for MacOS.\nNone of these look like something to build any substantial with. Probably on the same level as "},{"type":"element","tagName":"a","properties":{"href":"https://flutter.dev/docs"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Flutter"}]}]},{"type":"text","value":" for desktop - which is also not ready for prime time."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I think the ecosystem will be pretty exciting with more time, when these libraries are mature. Something to look forward to."}]}],"data":{"quirksMode":false}},"frontmatter":{"title":"Bootstrapping a simple Mac app can be hard.","date":"March 11, 2021","description":"There is a lot of options for writing a Mac GUI app. I tested a few of them, this is a recap of how it went.","gallerySources":null,"lastUpdated":null,"tags":["technology"]},"timeToRead":8}},"pageContext":{"slug":"/simple-mac-app/","previous":{"parent":{"name":"index"},"fields":{"slug":"/you-may-not-need-react/"},"frontmatter":{"title":"You may not need React"}},"next":{"parent":{"name":"index"},"fields":{"slug":"/scrobble-everything/"},"frontmatter":{"title":"Scrobble Everything."}}}},"staticQueryHashes":["139983731","63159454"]}